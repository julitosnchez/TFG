    print '\n*** Baxter Description ***\n'
    kin.print_robot_description()
    print '\n*** Baxter KDL Chain ***\n'
    kin.print_kdl_chain()

    pos = [kp[0],kp[1],kp[2]]
    pos2 = [kp[0]+0.3,kp[1],kp[2]-0.15]
    pos3 = [kp[0]+0.4,kp[1],kp[2]]
    pos4 = [kp[0],kp[1],kp[2]-0.3]
    pos5 = [kp[0]-0.3,kp[1],kp[2]-0.15]
    pos6 = [kp[0]-0.4,kp[1],kp[2]]
    rot = [kp[3],kp[4],kp[5],kp[6]]
    print kin.inverse_kinematics(pos)  # position, don't care orientation
    print '\n*** Baxter Pose IK ***\n'  # position & orientation
    l = kin.inverse_kinematics(pos, rot)
    l2 = kin.inverse_kinematics(pos2,rot)
    l3 = kin.inverse_kinematics(pos3,rot)
    l4 =  kin.inverse_kinematics(pos4,rot)
    l5 =  kin.inverse_kinematics(pos5,rot)
    l6 =  kin.inverse_kinematics(pos6,rot)
    print l
    m = {'left_w0': l[4], 'left_w1': l[5], 'left_w2': l[6], 'left_e0': l[2], 'left_e1': l[3], 'left_s0': l[0], 'left_s1': l[1]}
    n =  {'left_w0': l2[4], 'left_w1': l2[5], 'left_w2': l2[6], 'left_e0': l2[2], 'left_e1': l2[3], 'left_s0': l2[0], 'left_s1': l2[1]}
    r = {'left_w0': l3[4], 'left_w1': l3[5], 'left_w2': l3[6], 'left_e0': l3[2], 'left_e1': l3[3], 'left_s0': l3[0], 'left_s1': l3[1]}
    s = {'left_w0': l4[4], 'left_w1': l4[5], 'left_w2': l4[6], 'left_e0': l4[2], 'left_e1': l4[3], 'left_s0': l4[0], 'left_s1': l4[1]}
    t = {'left_w0': l5[4], 'left_w1': l5[5], 'left_w2': l5[6], 'left_e0': l5[2], 'left_e1': l5[3], 'left_s0': l5[0], 'left_s1': l5[1]}
    u = {'left_w0': l6[4], 'left_w1': l6[5], 'left_w2': l6[6], 'left_e0': l6[2], 'left_e1': l6[3], 'left_s0': l6[0], 'left_s1': l6[1]}
    print m

    if l != None:
    	limb = baxter_interface.Limb('left')
    	limb.move_to_joint_positions(r)
	limb.move_to_joint_positions(n)
	limb.move_to_joint_positions(s)
	limb.move_to_joint_positions(t)
	limb.move_to_joint_positions(u)
	limb.move_to_joint_positions(m)

	BUCLE POSICIONES OBJETIVO, IR SUMANDO/RESTANDO MUY POQUITO A POCO
	SI ES DISTINTO DE NONE, LA COJO Y ME MUEVO, SI NO, PASO A SIGUIENTE    























# Jacobian
    print '\n*** Baxter Jacobian ***\n'
    print kin.jacobian()
    # Jacobian Transpose
    print '\n*** Baxter Jacobian Tranpose***\n'
    print kin.jacobian_transpose()
    # Jacobian Pseudo-Inverse (Moore-Penrose)
    print '\n*** Baxter Jacobian Pseudo-Inverse (Moore-Penrose)***\n'
    print kin.jacobian_pseudo_inverse()
    # Joint space mass matrix
    print '\n*** Baxter Joint Inertia ***\n'
    print kin.inertia()
    # Cartesian space mass matrix
    print '\n*** Baxter Cartesian Inertia ***\n'
    print kin.cart_inertia()
